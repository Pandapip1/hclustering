source("~/source/repos/hclustering/gavin_autofcgating_v2.R")
plot_dendro <- function(d, set = "A", xmin = -50, height = 500, width = 500, ...) {
print("a1")
# get x/y locations of every node in the tree
allXY <- get_xy(d)
allXY <- allXY[order(allXY[,2]),]
print("a2")
# get non-zero heights so we can split on them and find the relevant labels
non0 <- allXY[["y"]][allXY[["y"]] > 0]
print("a3")
# splitting on the minimum height would generate all terminal nodes anyway
split <- non0[min(non0) < non0]
print("a4")
# label is a list-column since non-zero heights have multiple labels
# for now, we just have access to terminal node labels
labs <- labels(d)
print("a5")
allXY$label <- vector("list", nrow(allXY))
allXY$classification <- vector("list", nrow(allXY))
allXY$hovertext <- vector("list", nrow(allXY))
print("a6")
View(allXY$label[[1]])
View(labs)
allXY$label[[1]] <- labs
print("a7")
allXY$label[allXY$y == 0] <- labs
print("a8")
# collect all the *unique* non-trivial nodes
nodes <- unlist_dendro(d)
nodes <- nodes[order(sapply(nodes, function(node) attributes(node)$height))]
print("a10")
print("a11")
labs <- lapply(nodes, labels)
names(nodes) <- lapply(labs, function(lab) do.call(paste, as.list(lab)))
print("a12")
# NOTE: this won't support nodes that have the same height
# but that isn't possible, right?
for (i in seq_along(nodes)) {
node <- nodes[[i]]
allXY$label[[i]] <- labels(node)
if (is.null(attributes(node)$classification)){
allXY$classification[[i]] <- "root"
allXY$hovertext[[i]] <- "leaf"
} else {
allXY$classification[[i]] <- attributes(node)$classification
allXY$hovertext[[i]] <-  attributes(node)$hovertext
}
}
print("a13")
tidy_segments <- dendextend::as.ggdend(d)$segments
print("a14")
allTXT <- allXY[allXY$y == 0, ]
print("a15")
blank_axis <- list(
title = "",
showticklabels = FALSE,
zeroline = FALSE
)
print("a16")
allXY$members <- sapply(allXY$label, length)
print("a17")
allTXT$label <- as.character(allTXT$label)
print("a18")
allXY %>%
plot_ly(x = ~y, y = ~x, color=I("black"), hoverinfo = "none") %>%
add_segments(
data = tidy_segments, xend = ~yend, yend = ~xend, showlegend = FALSE
) %>%
add_markers(
data = allXY, x=~y, y=~x, key = ~label,
text = ~paste(hovertext), hoverinfo = "text", color = ~unlist(classification), colors = c("black", brewer.pal(8, "Dark2"))
) %>%
layout(
dragmode = "select",
xaxis = c(blank_axis, list(autorange = TRUE)),
yaxis = c(blank_axis, list(autorange = TRUE))
)
}
# generate ptree
#p$data <- cbind(newdata, p$data)
plot_dendro(res)
# generate ptree
p$data <- cbind(newdata, p$data)
plot_dendro <- function(d, set = "A", xmin = -50, height = 500, width = 500, ...) {
print("a1")
# get x/y locations of every node in the tree
allXY <- get_xy(d)
allXY <- allXY[order(allXY[,2]),]
print("a2")
# get non-zero heights so we can split on them and find the relevant labels
non0 <- allXY[["y"]][allXY[["y"]] > 0]
print("a3")
# splitting on the minimum height would generate all terminal nodes anyway
split <- non0[min(non0) < non0]
print("a4")
# label is a list-column since non-zero heights have multiple labels
# for now, we just have access to terminal node labels
labs <- labels(d)
print("a5")
allXY$label <- vector("list", nrow(allXY))
allXY$classification <- vector("list", nrow(allXY))
allXY$hovertext <- vector("list", nrow(allXY))
print("a6")
print(labs)
print(allXY$label[[1]])
View(allXY$label[[1]])
View(labs)
allXY$label[[1]] <- labs
print("a7")
allXY$label[allXY$y == 0] <- labs
print("a8")
# collect all the *unique* non-trivial nodes
nodes <- unlist_dendro(d)
nodes <- nodes[order(sapply(nodes, function(node) attributes(node)$height))]
print("a10")
print("a11")
labs <- lapply(nodes, labels)
names(nodes) <- lapply(labs, function(lab) do.call(paste, as.list(lab)))
print("a12")
# NOTE: this won't support nodes that have the same height
# but that isn't possible, right?
for (i in seq_along(nodes)) {
node <- nodes[[i]]
allXY$label[[i]] <- labels(node)
if (is.null(attributes(node)$classification)){
allXY$classification[[i]] <- "root"
allXY$hovertext[[i]] <- "leaf"
} else {
allXY$classification[[i]] <- attributes(node)$classification
allXY$hovertext[[i]] <-  attributes(node)$hovertext
}
}
print("a13")
tidy_segments <- dendextend::as.ggdend(d)$segments
print("a14")
allTXT <- allXY[allXY$y == 0, ]
print("a15")
blank_axis <- list(
title = "",
showticklabels = FALSE,
zeroline = FALSE
)
print("a16")
allXY$members <- sapply(allXY$label, length)
print("a17")
allTXT$label <- as.character(allTXT$label)
print("a18")
allXY %>%
plot_ly(x = ~y, y = ~x, color=I("black"), hoverinfo = "none") %>%
add_segments(
data = tidy_segments, xend = ~yend, yend = ~xend, showlegend = FALSE
) %>%
add_markers(
data = allXY, x=~y, y=~x, key = ~label,
text = ~paste(hovertext), hoverinfo = "text", color = ~unlist(classification), colors = c("black", brewer.pal(8, "Dark2"))
) %>%
layout(
dragmode = "select",
xaxis = c(blank_axis, list(autorange = TRUE)),
yaxis = c(blank_axis, list(autorange = TRUE))
)
}
# generate ptree
p$data <- cbind(newdata, p$data)
# generate ptree
#p$data <- cbind(newdata, p$data)
plot_dendro(res)
source("~/source/repos/hclustering/gavin_autofcgating_v2.R")
labels(d)
labels(res)
res
attributes(res)
source("~/source/repos/hclustering/gavin_autofcgating_v2.R")
View(res)
label(res)
labels(res)
better_hclust <- function(
data,
normalization=outlier_resistant_minmax(),
clustering=default_kmeans_clustering(),
max_depth=-1,
do_parallel=T
){
if (max_depth == 0) {
res <- list(0)
attributes(res) <- list(
members = 1,
midpoint = 0.5,
height = 0,
variable.label = make_label(),
leaf = TRUE,
data = rownames(data)
)
return(res)
}
og <- data
if (nrow(data) <= 2){
res <- list(0)
attributes(res) <- list(
members = 1,
midpoint = 0.5,
height = 0,
variable.label = make_label(),
leaf = TRUE,
data = rownames(og)
)
return(res)
}
data <- data %>% dplyr::select(where(is.numeric)) %>% normalization()
pca <- fast.prcomp(data)$x
#config <- umap::umap.defaults
#config$n_neighbors <- min(nrow(data), config$n_neighbors)
#config$n_components <- 1
#pca <- umap::umap(data, config)$layout
for (pc in seq_len(ncol(pca))){
clusters <- clustering(pca[,pc])
if (max(clusters) > 1){
res <- foreach(clust=seq_len(max(clusters))) %do% better_hclust(
data = og[clusters == clust,],
normalization = normalization,
clustering = clustering,
max_depth = max_depth-1,
do_parallel = F
)
mems <- res %>% lapply(function(x) attr(x, "members")) %>% unlist() %>% sum()
attributes(res) <- list(
members = mems,
midpoint = mems/ 2,
height = res %>% lapply(function(x) attr(x, "height")) %>% unlist() %>% max() + 1,
variable.label = make_label(),
data = res %>% lapply(function(x) attr(x, "data")) %>% unlist()
)
class(res) <- "dendrogram"
return(res)
}
}
res <- list(0)
attributes(res) <- list(
members = 1,
midpoint = 0.5,
height = 0,
variable.label = make_label(),
leaf = TRUE,
data = rownames(og)
)
return(res)
}
source("~/source/repos/hclustering/gavin_autofcgating_v2.R")
labels(res)
source("~/source/repos/hclustering/gavin_autofcgating_v2.R")
source("~/source/repos/hclustering/gavin_autofcgating_v2.R")
# generate ptree
#p$data <- cbind(newdata, p$data)
plot_dendro(res)
source("~/source/repos/hclustering/gavin_autofcgating_v2.R")
# generate ptree
#p$data <- cbind(newdata, p$data)
plot_dendro(res)
# do unsupervised gating
res <- better_hclust(as.data.frame(exprs(fs[[1]])), max_depth=-1)
View(res)
# perform statistical tests
res <- getTests(res, gs[[1]])
View(res)
# generate ptree
#p$data <- cbind(newdata, p$data)
plot_dendro(res)
